1) What happens when you initialize a repository? Why do 
you need to do it?

Git creates a 'hidden' directory that will contain all the committed
versions of the files that are being tracked.  Without that, there
is no version control.

2) How is the staging area different from the working directory 
and the repository? What value do you think it offers?

The staging area is like purgatory where the files aren't committed yet
but will be and the repository is where they go.  It makes it much more succinct
in that you can only commit the files that need it when they need it.

3) How can you use the staging area to make sure you have one 
commit per logical change?

You can place the files there that have changes made and then used
git diff to make sure those changes are what you want them to be.

4)  What are some situations when branches would be helpful in 
keeping your history organized? How would branches help?

Branches are great for game mod modes or experimental features
that you want to do or try but not affect the main program.

5)  How do the diagrams help you visualize the branch structure?

The diagrams are a good way to keep them in sight.  It's pretty easy
when there's only 1, 2, or 3 branches, say, but it could get messy fast.

6) What is the result of merging two branches together? Why do we 
represent it in the diagram the way we do?

The combining of the two instances of the files based on the two commits
and the last joint commig.  It helps to see where we will end up.

7) What are the pros and cons of Git’s automatic merging vs. always 
doing merges manually?

Oh man, manually merging two files always would be a time consuming task
and human error is likely to be introduced.  But having a computer do it
that may not know nuances is also troublsome, that's why git merge is 
conservative and has us figure it out.




